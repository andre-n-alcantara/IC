Olimpíada Brasileira de Informática – OBI2016 3
Times
Nome do arquivo:times.c,times.cpp,times.pas,times.java,times.jsoutimes.pyChegou a hora da caça ao tesouro na gincana escolar! Para jogar, sua turma deNpessoas devese dividir em dois times. A divisão será feita com base no número de chamada de cada aluno, umnúmero entre1eN. Só que mais importante que fazer uma divisão balanceada é evitar que pessoasque não se gostamquem no mesmo time. Você receberá o númeroNde alunos e, para cada pessoa,você receberá a lista de pessoas que ela não gosta. Se a pessoaAnão gosta da pessoaBentão apessoaBtambém não gosta da pessoaA. O aluno de número1semprecará no primeiro time.Você deve dividir os outros alunos entre os dois times de forma que dentro de cada time não hajaduas pessoas que não se gostam.
Entrada
A primeira linha contém um inteiroN, representando o número de alunos na turma. AsNlinhasseguintes, para1≤i≤N, contém um inteiroMi, indicando de quantas pessoas o alunoinão gosta,e em seguidaMiinteirosX j, indicando que a pessoainão gosta da pessoaX j.
Saída
Seu programa deve produzir duas linhas, a primeira contendo os números dos integrantes do primeirotime e a segunda contendo os números dos integrantes do segundo time, ambas em ordem crescente.Lembre-se que o aluno1sempre estará no primeiro time. Sempre há uma única solução.
Restrições
•2≤N≤105.•1≤Mi≤N−1.•1≤X
j≤N.•1≤
N∑
i=1Mi≤6×105.•Ou seja, a soma de todos osMidescritos na entrada é no máximo6×105.
Informações sobre a pontuação
•Em um conjunto de casos de teste equivalente a 40 pontos,N≤15.
Exemplos
Entrada132 12 91 103 8 12 135 8 10 13 6 52 11 41 41 83 4 3 71 12 2 41 52 3 12 4 3
Saída1 2 3 4 7 115 6 8 9 10 12 13Olimpíada Brasileira de Informática – OBI2016 4
Entrada151 131 131 131 131 131 131 131 131 131 131 131 1314 11 7 1 10 8 6 14 12 3 2 15 5 4 91 131 13
Saída1 2 3 4 5 6 7 8 9 10 11 12 14 1513