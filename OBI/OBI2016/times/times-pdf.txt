Olimpíada Brasileira de Informática - OBI2016 3

Times

Nome do arquivo: times.c, times.cpp, times.pas, times. java, times.js ou times.py

Chegou a hora da caça ao tesouro na gincana escolar! Para jogar, sua turma de N pessoas deve
se dividir em dois times. A divisão será feita com base no número de chamada de cada aluno, um
número entre 1 e N. Só que mais importante que fazer uma divisão balanceada é evitar que pessoas
que não se gostam fiquem no mesmo time. Você receberá o número N de alunos e, para cada pessoa,
você receberá a lista de pessoas que ela não gosta. Se a pessoa A não gosta da pessoa B então a
pessoa B também não gosta da pessoa 4. O aluno de número 1 sempre ficará no primeiro time.
Você deve dividir os outros alunos entre os dois times de forma que dentro de cada time não haja
duas pessoas que não se gostam.

Entrada

A primeira linha contém um inteiro N, representando o número de alunos na turma. As N linhas
seguintes, para 1 < 1 < N, contém um inteiro M;, indicando de quantas pessoas o aluno à não gosta,
e em seguida M; inteiros X;, indicando que a pessoa i não gosta da pessoa X,;.

Saída

Seu programa deve produzir duas linhas, a primeira contendo os números dos integrantes do primeiro
time e a segunda contendo os números dos integrantes do segundo time, ambas em ordem crescente.
Lembre-se que o aluno 1 sempre estará no primeiro time. Sempre há uma única solução.

Restrições

2<N<10.
I<M;<N-I.
el< X; <N.
N
1<5 Mi <6x 105.
i=1
e Ou seja, a soma de todos os M; descritos na entrada é no máximo 6 x 10º.

Informações sobre a pontuação

e Em um conjunto de casos de teste equivalente a 40 pontos, N < 15.

Exemplos

Entrada Saída

3 1234711
2129 5 689101213
10
38 12 13

8 10 13 6 5
2114

4

q

w
q

O)
BON Has
“s

wma

 Olimpíada Brasileira de Informática - OBI2016

Entrada
5

171108614 1232155409

CC HH COCO ww www w

Saída

1234567891011121415
13

