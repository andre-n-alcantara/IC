OBI2003 - página 80Torres de Hanói
Arquivo fonte: hanoi.c, hanoi.cc, hanoi.cpp ou hanoi.pasO quebra-cabeças Torres de Hanoi é muito antigo e conhecido, sendo constituído de um conjuntode N discos de tamanhos diferentes e três pinos verticais, nos quais os discos podem ser encaixa-dos.Cada pino pode conter uma pilha com qualquer número de discos, desde que cada disco não sejacolocado acima de outro disco de menor tamanho. A conﬁguração inicial consiste de todos os dis-cos no pino 1. O objetivo do quebra-cabeças é mover todos os discos para um dos outros pinos,sempre obedecendo à restrição de não colocar um disco sobre outro menor.Um algoritmo para resolver este problema é o seguinte.procedimento Hanoi(N, Orig, Dest, Temp)  se N = 1 entãomover o menor disco do pino Orig para o pino Dest;  senão    Hanoi(N-1, Orig, Temp, Dest);     mover o N-ésimo menor disco do pino Orig para o pino Dest;    Hanoi(N-1, Temp, Dest, Orig);  ﬁm-seﬁm
1. Tarefa
Sua tarefa é escrever um programa que determine quantos movimentos de trocar um disco de umpino para outro serão executados pelo algoritmo acima para resolver o quebra-cabeça.
2. Entrada
A entrada possui vários conjuntos de teste. Cada conjunto de teste é composto por uma únicalinha, que contém um único número inteiro N (0 ≤ N ≤ 30), indicando o número de discos. O ﬁnalda entrada é indicado porN= 0.Exemplo de Entrada1201 23OBI2003 - página 93. Saída
Para cada conjunto de teste, o seu programa deve escrever três linhas na saída. A primeira linhadeve conter um identiﬁcador do conjunto de teste, no formato “Teste n”, onde n é numeradoseqüencialmente a partir de 1. A segunda linha deve conter o número de movimentos que são exe-cutados pelo algoritmo dado para resolver o problema das Torres de Hanói comNdiscos. A ter-ceira linha deve ser deixada em branco. A graﬁa mostrada no Exemplo de Saída, abaixo, deve serseguida rigorosamente.Exemplo de SaídaTeste 11Teste 23(esta saída corresponde ao exemplo de entrada acima)
4. Restrições
0 ≤ N ≤ 30 (N = 0 apenas para indicar o ﬁnal da entrada)