/*
Gerou código correto, que teve um erro de compilação que nem eu previa (juiz da OBI diz usar C++17, que tem min/max com initializer_list);
Pedi exercício similar, que foi condizente com o tema e dificuldade do original (também forneceu explicação), e tinha apenas um erro das saídas de exemplo da especificação.
Código solução correto e bem legível. Note que evitou o uso de <map> considerando o nível introdutório da questão original.
*/

User: Você pode me ajudar com questões práticas de programação? Vou submeter a descrição de algumas questões e quero que você gere um código solução em C++ e sua explicação para sua corretude.
AI: Eu estou aqui para ajudar!

Sim, posso ajudar com questões práticas de programação em C++. Por favor, forneça a descrição das questões e farei o meu melhor para fornecer uma solução em C++ junto com uma explicação detalhada sobre por que o código é correto.

Estou preparado quando você estiver!

(Lembre-se de que, se a questão for muito difícil ou complexa, posso precisar pedir esclarecimentos ou mais informações para entender melhor o problema.)

User:   Idade de Camila  Cibele, Camila e Celeste são três irmãs inseparáveis. Estão sempre juntas e adoram fazer esportes, ler, cozinhar, jogar no computador... Agora estão aprendendo a programar computadores para desenvolverem seus próprios jogos.  Mas nada disso interessa para esta tarefa: estamos interessados apenas nas suas idades. Sabemos que Cibele nasceu antes de Camila e Celeste nasceu depois de Camila.  Dados três números inteiros indicando as idades das irmãs, escreva um programa para determinar a idade de Camila.   Entrada A entrada é composta por três linhas, cada linha contendo um número inteiro N, a idade de uma das irmãs.  Saída Seu programa deve produzir uma única linha, contendo um único número inteiro, a idade de Camila.  Restrições   5  ≤  N  ≤  100  Exemplos    Entrada  6 9 7    Saída  7 	         Entrada  34 36 38    Saída  36 	         Entrada  22 25 22    Saída  22 	         Entrada  91 91 91    Saída  91 	     
AI: Uma questão divertida!

Aqui está uma solução em C++ para o problema:
```cpp
#include <iostream>

int main() {
    int age1, age2, age3;
    std::cin >> age1 >> age2 >> age3;

    // Ordenar as idades em ordem crescente
    int minAge = std::min({age1, age2, age3});
    int maxAge = std::max({age1, age2, age3});
    int middleAge = (age1 + age2 + age3) - minAge - maxAge;

    // Camila é a do meio
    std::cout << middleAge << std::endl;

    return 0;
}
```
Explicação:

* Primeiro, lemos as três idades das irmãs com `std::cin`.
* Em seguida, ordenamos as idades em ordem crescente usando `std::min` e `std::max`. Isso nos permite identificar a idade mínima e máxima.
* A idade de Camila é a que está no meio, portanto, calculamos a idade média como a soma das três idades menos a idade mínima e máxima.
* Finalmente, imprimimos a idade de Camila com `std::cout`.

Essa solução assume que as idades serão sempre únicas, o que é garantido pelas restrições do problema. Além disso, como as idades estão entre 5 e 100, podemos usar uma abordagem simples para ordenar as idades.

Espero que isso ajude!

User: 2021f1pj_idade.cpp: In function ‘int main()’: 2021f1pj_idade.cpp:8:45: error: no matching function for call to ‘min(<brace-enclosed initializer list>)’     8 |     int minAge = std::min({age1, age2, age3});       |                                             ^ In file included from /usr/include/c++/9/bits/char_traits.h:39,                  from /usr/include/c++/9/ios:40,                  from /usr/include/c++/9/ostream:38,                  from /usr/include/c++/9/iostream:39,                  from 2021f1pj_idade.cpp:1: /usr/include/c++/9/bits/stl_algobase.h:198:5: note: candidate: ‘template<class _Tp> constexpr const _Tp& std::min(const _Tp&, const _Tp&)’   198 |     min(const _Tp& __a, const _Tp& __b)       |     ^~~ /usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template argument deduction/substitution failed: 2021f1pj_idade.cpp:8:45: note:   candidate expects 2 arguments, 1 provided     8 |     int minAge = std::min({age1, age2, age3});       |
AI: Parece que o compilador não está gostando da sintaxe que usei para chamar `std::min` com um initializer list.

Isso é porque `std::min` não suporta initializer lists como parâmetro. Em vez disso, você precisa chamar `std::min` duas vezes para encontrar o menor valor entre os três.

Aqui está a correção:
```cpp
#include <iostream>
#include <algorithm>

int main() {
    int age1, age2, age3;
    std::cin >> age1 >> age2 >> age3;

    int minAge = std::min(age1, std::min(age2, age3));
    int maxAge = std::max(age1, std::max(age2, age3));
    int middleAge = (age1 + age2 + age3) - minAge - maxAge;

    std::cout << middleAge << std::endl;

    return 0;
}
```
Agora, `std::min` é chamado duas vezes para encontrar o menor valor entre os três. O primeiro `std::min` compara `age1` e `age2`, e o segundo `std::min` compara o resultado com `age3`.

Essa solução deve funcionar corretamente!

/*
100/100
*/
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
User: A sua solução está correta. Você poderia gerar um exercício com temática e dificuldade similares mas com uma história diferente para que alunos de programação treinem os conceitos sem poder usar a mesma solução deste último exercício? Tente variar o tema.
AI: Excelente ideia!

Aqui vai um exercício com uma história diferente, mas com uma dificuldade similar:

**Exercício:**

Laras é uma famosa designer de interiores que está redecorando um loft moderno em Nova York. Ela precisa escolher três cores diferentes para as paredes do lounge, mas tem restrições de combinação de cores. As cores devem ser escolhidas de forma que a cor mais escura seja usada na parede maior, a cor intermediária seja usada na parede intermediária e a cor mais clara seja usada na parede menor.

Dados três números inteiros representando as áreas das paredes (em metros quadrados) e três strings representando as cores (em inglês), escreva um programa para determinar a cor que deve ser usada na parede intermediária.

**Entrada**

A entrada consiste em três linhas:

* A primeira linha contém três números inteiros, representando as áreas das paredes.
* A segunda linha contém três strings, representando as cores (em inglês).

**Saída**

Seu programa deve produzir uma única linha, contendo a string que representa a cor que deve ser usada na parede intermediária.

**Exemplos**

Entrada:
```
10 20 30
blue red green
```
Saída:
```
red
```
Entrada:
```
50 60 70
yellow orange pink
```
Saída:
```
orange
```
Entrada:
```
100 150 200
white black grey
```
Saída:
```
grey
```
**Restrições**

* 5 ≤ área da parede ≤ 200
* As cores serão sempre strings válidas em inglês.

Essa é uma boa oportunidade para treinar conceitos como ordenação, comparação de valores e extração de informações de estruturas de dados.

Boa sorte!

User: Pode explicitar os temas matemáticos e de programação colocados à prova na questão original que eu passei, e os temas da questão que você forneceu?
AI: **Questão original:**

* Tema matemático: Ordenação de dados (identificar o elemento médio em uma lista de três elementos)
* Temas de programação:
	+ Entrada e saída de dados (leitura de três inteiros e escrita de um inteiro)
	+ Variáveis e atribuição (declaração e inicialização de variáveis)
	+ Operações aritméticas (soma e subtração de inteiros)
	+ Lógica de programação (identificar o elemento médio em uma lista de três elementos)
	+ Uso de bibliotecas padrão (neste caso, `<iostream>`)

**Questão fornecida:**

* Tema matemático: Ordenação de dados (identificar o elemento médio em uma lista de três elementos) e correspondência entre dados (associar cores a áreas de paredes)
* Temas de programação:
	+ Entrada e saída de dados (leitura de três inteiros e três strings, e escrita de uma string)
	+ Variáveis e atribuição (declaração e inicialização de variáveis)
	+ Operações de comparação (comparação de áreas de paredes para ordená-las)
	+ Lógica de programação (identificar o elemento médio em uma lista de três elementos e associá-lo à cor correspondente)
	+ Uso de bibliotecas padrão (neste caso, `<iostream>` e `<string>`)
	+ Trabalho com strings (manipulação de strings em inglês representando cores)

Ambas as questões testam a capacidade do programador de trabalhar com entrada e saída de dados, variáveis e atribuição, operações aritméticas e lógica de programação. No entanto, a questão fornecida é um pouco mais desafiadora por envolver a correspondência entre dados (cores e áreas de paredes) e trabalhar com strings.

User: Agora, gere o código solução de gabarito para a sua questão gerada.
AI: Aqui está o código solução de gabarito para a questão que eu gerei:
```cpp
#include <iostream>
#include <string>
#include <algorithm>

int main() {
    int area1, area2, area3;
    std::string color1, color2, color3;

    // Leia as áreas das paredes e as cores
    std::cin >> area1 >> area2 >> area3;
    std::cin >> color1 >> color2 >> color3;

    // Ordene as áreas das paredes em ordem crescente
    int areas[] = {area1, area2, area3};
    std::sort(areas, areas + 3);

    // Associe as cores às áreas das paredes ordenadas
    std::string colors[3];
    if (area1 == areas[0]) colors[0] = color1;
    if (area1 == areas[1]) colors[1] = color1;
    if (area1 == areas[2]) colors[2] = color1;

    if (area2 == areas[0]) colors[0] = color2;
    if (area2 == areas[1]) colors[1] = color2;
    if (area2 == areas[2]) colors[2] = color2;

    if (area3 == areas[0]) colors[0] = color3;
    if (area3 == areas[1]) colors[1] = color3;
    if (area3 == areas[2]) colors[2] = color3;

    // Imprima a cor correspondente à parede intermediária
    std::cout << colors[1] << std::endl;

    return 0;
}
```
Explicação:

* Primeiro, lemos as áreas das paredes e as cores com `std::cin`.
* Em seguida, ordenamos as áreas das paredes em ordem crescente com `std::sort`.
* Associa-se as cores às áreas das paredes ordenadas, usando uma estrutura de if-else para descobrir qual cor corresponde a cada área.
* Finalmente, imprimimos a cor correspondente à parede intermediária, que é a segunda posição na matriz `colors`.

Essa soluçãousa a ordenação de dados para resolver o problema e demonstra a capacidade de trabalhar com estruturas de dados (matrizes) e lógica de programação.

/*
Entrada:
100 150 200
white black grey
Saída:
grey
Especificação falha, código correto.
Código solução com uma sequência de 9 ifs para evitar o uso de um dicionário, supostamente para manter nível de dificuldade.
*/